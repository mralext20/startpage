!function () { "use strict"; class t { constructor(t) { this.outTemp = isNaN(parseFloat(t.outTemp)) ? void 0 : parseFloat(t.outTemp), this.insideTemp = isNaN(parseFloat(t.insideTemp)) ? void 0 : parseFloat(t.insideTemp), this.wind = isNaN(parseFloat(t.wind)) ? void 0 : parseFloat(t.wind); let e = isNaN(parseFloat(t.windGust)) ? void 0 : parseFloat(t.windGust); this.windGust = e == this.wind ? e : void 0, this.windDirection = t.windDirection, this.rain = isNaN(parseFloat(t.rain)) || 0 == parseFloat(t.rain) ? void 0 : parseFloat(t.rain) } get Template() { let t = `<i class="fas fa-thermometer-three-quarters"></i>:${this.outTemp}&#176;C <i class="fas fa-home"></i>:${this.insideTemp}&#176;C`; if (this.wind) { let e = ` ðŸŒ¬: ${this.windDirection} ${this.wind}`; this.windGust && (e += `G${this.windGust}`), t += e += " MPH" } return this.rain && (t += `<i class="fas fa-tint"></i>: ${this.rain} IN`), t } } class e { constructor(t) { let e = t.getHours(); e > 12 && (e -= 12), this.currentHour = (e < 10 ? "0" : "") + e, 0 == e && (this.currentHour = 12); let i = t.getMinutes(); this.currentMinutes = (i < 10 ? "0" : "") + i } get Template() { return `${this.currentHour}:${this.currentMinutes}` } } let i = { weather: new t({ outTemp: "-", insideTemp: "-", wind: "-", windGust: "-", windDirection: "-", rain: "-" }), time: new e(new Date) }, s = { weather: [], time: [] }; function n(t) { if (!i.hasOwnProperty(t) || !Array.isArray(s[t])) throw new Error(`Unkown property ${t}, please review your state and listeners`) } const r = new class { get State() { return i } subscribe(t, e) { n(t), function (t, e) { if ("function" != typeof t) throw new Error(`Unable to subscribe to ${e} fn must be a function`) }(e, t), s[t].push(e) } commit(t, e) { n(t), i[t] = e, s[t].forEach(t => t()) } }; var a = { weatherFUrl: "http://alext.duckdns.org/weewx/api/daily.json", weatherCUrl: "http://alext.duckdns.org/weewx/c/api/daily.json" }; async function o(t) { const e = await fetch(t); if (e.ok) return await e.json(); throw new Error("responce not ok") } const u = new class { async update() { let e, i; try { e = await o(a.weatherFUrl), i = await o(a.weatherCUrl) } catch (t) { return } let s = new t({ outTemp: i.stats.current.outTemp, insideTemp: i.stats.current.insideTemp, windDirection: e.stats.current.windDirText.trim(), wind: e.stats.current.windSpeed, windGust: e.stats.current.windGust, rain: e.stats.sinceMidnight.rainSum }); r.commit("weather", s) } }; function c() { let t = r.State.weather; document.getElementById("weather").innerHTML = t.Template } class w { constructor() { r.subscribe("weather", c), u.update(), setTimeout(() => { u.update() }, 3e5) } } const d = new class { update() { r.commit("time", new e(new Date)) } }; function l() { let t = r.State.time; document.getElementById("clock").innerHTML = t.Template } class p { constructor() { r.subscribe("time", l), d.update(), setTimeout(() => { d.update() }, 250) } } window.app = new class { constructor() { this.weatherController = new w, this.timeController = new p } } }();